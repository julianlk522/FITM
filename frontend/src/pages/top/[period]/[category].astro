---
import Link from '../../../components/Link'
import Pagination from '../../../components/Pagination.astro'
import ScrollUp from '../../../components/ScrollUp.astro'
import Layout from '../../../layouts/Layout.astro'
import type {
	CategoryContributor,
	CategoryCount,
	PaginatedLinks,
	Period,
} from '../../../types'
import { Periods } from '../../../types'

const { period } = Astro.params as { period: Period }
if (!period || !Periods.includes(period)) {
	return Astro.redirect('/404')
}
const other_periods = Periods.filter((other) => other !== period)

const { category } = Astro.params
if (!category) {
	return Astro.redirect(`/top/${period}`)
}

if (category && period === 'all') {
	return Astro.redirect(`/cat/${category}`)
}

const token = Astro.cookies.get('token')?.value
const user = Astro.cookies.get('user')?.value

const page = Astro.url.searchParams.get('page')
const page_num = page ? parseInt(page) : 1

const get_links_resp = await (token
	? fetch(`http://127.0.0.1:8000/links/${period}/${category}`, {
			headers: { Authorization: `Bearer ${token}` },
		})
	: fetch(`http://127.0.0.1:8000/links/${period}/${category}`))
const data: PaginatedLinks = await get_links_resp.json()
const links = data.Links
// [{URL: 'https://example.com', LikeCount: 100}, ...]

let subcats: CategoryCount[] = []
let top_contributors: CategoryContributor[] = []

if (links && links.length) {
	// r.Get("/links/{period}/subcat/{categories}", handler.GetSubcategoriesByPeriod)
	const subcats_resp = await fetch(
		`http://127.0.0.1:8000/links/${period}/subcat/${category}`
	)
	subcats = await subcats_resp.json()
	// [{Category: 'flowers', Count: 2}, ...]

	const top_contributors_resp = await fetch(
		`http://127.0.0.1:8000/links/${period}/cat/${category}/users`
	)
	top_contributors = await top_contributors_resp.json()
	// [{"Categories":"umvc3,2dfighters","LoginName":"bob","LinksSubmitted":"10"}]
}
---

<Layout Title='Welcome to the Open Internet Treasure Map (OITM)'>
	<main>
		<h1>{category} ({period.charAt(0).toUpperCase() + period.slice(1)})</h1>
		<section id='search-filters'>
			<h2>Filters</h2>
			<div>
				<p>Period:</p>
				{
					other_periods.map((period) => (
						<a
							href={
								period === 'all'
									? `/cat/${category}`
									: `/top/${period}/${category}`
							}
						>
							{period}
						</a>
					))
				}
			</div>
			<div>
				<p>{category.includes(',') ? 'Categories:' : 'Category:'}</p>
				<a href=`/top/${period}`>Remove</a>
			</div>
		</section>
		{
			links && links.length ? (
				<>
					<section>
						<h2>Subcategories</h2>
						{subcats.length ? (
							<ol id='top-categories'>
								{subcats.map((subcat) => (
									<li>
										<strong>
											<a
												href={`/top/${period}/${category + ',' + subcat.Category}`}
											>
												{subcat.Category}
											</a>
										</strong>
										<span> ({subcat.Count})</span>
									</li>
								))}
							</ol>
						) : (
							<p>No further subcategories</p>
						)}
					</section>
					<section>
						<h2>Top Contributors</h2>
						<ol>
							{top_contributors.map(
								(contributor: CategoryContributor) => (
									<li>
										<strong>
											<a
												href={`/map/${contributor.LoginName}`}
											>
												{contributor.LoginName}
											</a>
										</strong>
										<span>
											({contributor.LinksSubmitted})
										</span>
									</li>
								)
							)}
						</ol>
					</section>
					<section>
						<h2>Top Links</h2>

						<Pagination
							Period={period}
							Page={page_num}
							NextPage={data.NextPage}
						/>

						<ol>
							{links.map((link) => (
								<Link
									client:load
									Link={link}
									IsSummaryPage={false}
									IsTagPage={false}
									Token={token}
									User={user}
								/>
							))}
						</ol>
					</section>

					{data.NextPage > 0 ? (
						<Pagination
							Period={period}
							Page={page_num}
							NextPage={data.NextPage}
						/>
					) : null}

					<ScrollUp />
				</>
			) : (
				<p>No links found</p>
			)
		}
	</main>
</Layout>

<style>
	#search-filters {
		div {
			display: flex;
			align-items: center;
		}

		p {
			margin-top: 0;
		}

		a {
			margin-left: 0.5rem;
		}
	}
	li strong:has(+ span) a {
		display: inline-block;
	}
</style>
