---
import Link from '../../components/Link/Link'
import ScrollUp from '../../components/ScrollUp.astro'
import TagCat from "../../components/Tag/TagCat"
import EditAbout from '../../components/Tmap/EditAbout'
import ProfilePic from '../../components/Tmap/ProfilePic'
import { TMAP_ENDPOINT } from '../../constants'
import BaseLayout from '../../layouts/BaseLayout.astro'
import type { FilteredTreasureMap, Profile, TreasureMap } from '../../types'
import { tmap_sections } from '../../types'
import { format_short_date } from '../../util/format_date'
import fetch_with_handle_redirect from '../../util/rate_limit'

// Auth
const token = Astro.cookies.get('token')?.value
const user = Astro.cookies.get('user')?.value

// Params
const { login_name } = Astro.params
if (!login_name) {
	return Astro.redirect('/')
}
const is_signed_in_user = login_name === user
let page_title = `${login_name}'s Treasure Map`

let cats: string | undefined
let cats_split: string[] = []
if (Astro.url.searchParams.get('cats')) {
	cats = Astro.url.searchParams.get('cats') as string
	cats_split = cats.split(',')

	if (cats.length) {
		page_title += ' (Filtered)'
	}
}

// Get Tmap
let tmap: TreasureMap | FilteredTreasureMap
let tmap_url = TMAP_ENDPOINT + `/${login_name}`
if (cats_split.length) {
	tmap_url += `?cats=${cats_split[0]}`

	for (let i = 1; i < cats_split.length; i++) {
		tmap_url += `,${cats_split[i]}`
	}
}

const tmap_resp = token
	? await fetch_with_handle_redirect(tmap_url, {
			headers: {
				Authorization: `Bearer ${token}`,
			},
		})
	: await fetch_with_handle_redirect(tmap_url)
if (!tmap_resp.Response || tmap_resp.RedirectTo) {
	return Astro.redirect(tmap_resp.RedirectTo)
}
tmap = await tmap_resp.Response.json()
const used_sections = tmap_sections.filter((s) => tmap[s].length)

// Display about if used (unfiltered only)
let profile: Profile | undefined
let display_pfp = false
let display_about = false
let abbreviated_about: string | undefined

if (!cats && tmap.hasOwnProperty('Profile')) {
	profile = (tmap as TreasureMap).Profile
	const has_pfp = profile.PFP !== undefined && profile.PFP.length > 0
	display_pfp = has_pfp || is_signed_in_user

	const has_about = profile.About !== undefined && profile.About.length > 0
	display_about = has_about || is_signed_in_user

	abbreviated_about = profile.About.length > 200 ? `${profile.About.slice(0, 200)}...` : undefined
}

---

<BaseLayout Title={page_title}>
	<main>
		<h1>{login_name}'s Treasure Map</h1>
		<h2 class="subtitle">
			{profile ? `created: ${format_short_date(profile.Created)}` : '(Filtered)'}
		</h2>

		<!-- Profile  -->
		 {profile !== undefined && (display_about || display_pfp) ? (
			<section id="profile">
				<ProfilePic 
					client:load
					LoginName={login_name} 
					PFP={profile.PFP}
					SignedInUser={user} 
					Token={token} 
				/>

				{
					display_about ? 
						is_signed_in_user ? 
							<EditAbout
								client:load 
								token={token} 
								initial={profile.About}
							/>
						: abbreviated_about 
							?  <details>
								<summary>
									<pre>
										<span>about:</span> {abbreviated_about}
									</pre>
								</summary>
								<pre>
									<span>about:</span> {profile.About}
								</pre>
							</details> 
							: profile.About.length > 0 ?
							<pre>
								<span>about:</span> {profile.About}
							</pre>
							: null
					: null
				}
			</section>
		)
		: null}
			
		<!-- Category Filter -->
		{cats ? <section id='cat-filter' class="flex">
			<div>
				<h2>Cat Filter</h2>
				<p id="transfer-to-global-map">
					<a href={`/top?cats=${cats}`}>Transfer to Global Treasure Map</a>
				</p>
				<p id='reset-cat-filter'>
					<a href={`/map/${login_name}`}>Reset</a>
				</p>
			</div>
			<ul id='cat-list'>
				{
					cats_split.length > 1 ? (
						cats_split.map((cat) => {
							return (
								<TagCat
									Cat={cat}
									EditActivated={false}
									Deleted={undefined}
								/>
							)
						})
					) : (
						<TagCat
							Cat={cats_split[0]}
							EditActivated={false}
							Deleted={undefined}
						/>
					)
				}
			</ul>
		</section> : null}

		{used_sections.length ? 
			<>
				<section id='overview' class='flex'>
					<div>
						<h2>{cats ? 'Top Subcats' : 'Top Cats'}</h2>
						{
							tmap.Cats.length ? (
								<ol id="top-cats">
									{tmap.Cats.map((cat) => (
										<li>
											<a
												href={cats ? `/map/${login_name}?cats=${cats},${cat.Category}` : `/map/${login_name}?cats=${cat.Category}`}
											>
												{cat.Category}
											</a>
											<span>({cat.Count})</span>
										</li>
									))}
								</ol>
							) : (
								<p>No further subcats.</p>
							)
						}
					</div>
					<div>
						<h2>Skip to Section</h2>
						<ul id='skip-to-link-section'>
							{
								used_sections.map((s) => (
									<li>
										<a href={`#${s}`}>{s}</a>
									</li>
								))
							}
						</ul>
					</div>
				</section>

			{
				used_sections.map((s) => {
					return (
						<section id={s} class='link-section'>
							<h2>{s}</h2>
							<ol>
								{tmap[s].map((link) => {
									if (s === 'Submitted' || s === 'Tagged') {
										return (
											<Link
												client:load
												Link={link}
												CatsFromUser={login_name}
												IsSummaryPage={false}
												IsTagPage={false}
												IsTmapPage={true}
												Token={token}
												User={user}
											/>
										)
									} else {
										return (
											<Link
												client:load
												Link={link}
												CatsFromUser={
													link.CatsFromUser
														? login_name
														: undefined
												}
												IsSummaryPage={false}
												IsTagPage={false}
												IsTmapPage={true}
												Token={token}
												User={user}
											/>
										)
									}
								})}
							</ol>
						</section>
					)
				})
			}
			</>
		: null}

		<ScrollUp />
	</main>
</BaseLayout>

<style>	
	h1,
	h2.subtitle {
		text-align: left;
	}

	#cat-filter {
		display: flex;
		flex-direction: column;

		#transfer-to-global-map,
		#reset-cat-filter {
			margin: 0;
		}

		#cat-list {
			margin-bottom: 0;
		}
	}

	#profile {
		padding-top: 0;
		padding-bottom: 1rem;
	}

	#overview {
		display: flex;
		
		div:has(#skip-to-link-section) {
			margin: 0 auto;
		}

		#skip-to-link-section {
			list-style: none;
			margin: 0;
			padding: 0;
		}

		#top-cats,
		#skip-to-link-section {
			padding: 0.5rem;
		}
	}

	.link-section {
		padding: 0 0 0.5rem;

		h2 {
			position: sticky;
			top: 0px;
			padding: 1rem 0 0.5rem;
			background-color: #13151a;
		}

		ol {
			max-width: calc(100% - 1rem);
			margin-top: 0;
			margin-bottom: 0.5rem;
			margin-left: auto;
			padding: 0;
		}
	}

	@media (min-width: 480px) {
		#cat-filter {
			flex-direction: row;

			#transfer-to-global-map,
			#reset-cat-filter {
				margin: 0;
			}
			
			#cat-list {
				margin: 0 auto;
				align-content: center;
			}
		}
		#overview {
			#top-cats {
				max-height: 300px;

				li {
					max-width: initial;
				}
			}

			> * {
				max-width: 50%;
			}
		}
	}
</style>
