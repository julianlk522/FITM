---
import Link from '../../components/Link/Link'
import ScrollUp from '../../components/ScrollUp.astro'
import EditAbout from '../../components/Tmap/EditAbout'
import ProfilePic from '../../components/Tmap/ProfilePic'
import Layout from '../../layouts/Layout.astro'
import type { Profile, TreasureMap } from '../../types'
import { tmap_sections } from '../../types'
import format_date from '../../util/format_date'

const { login_name } = Astro.params
if (!login_name) {
	return Astro.redirect('/')
}

const token = Astro.cookies.get('token')?.value
const signed_in_user = Astro.cookies.get('user')?.value
const is_signed_in_user = login_name === signed_in_user

const tmap_resp = token
	? await fetch(`http://127.0.0.1:8000/map/${login_name}`, {
			headers: {
				Authorization: `Bearer ${token}`,
			},
		})
	: await fetch(`http://127.0.0.1:8000/map/${login_name}`)
if (tmap_resp.status > 399) {
	return Astro.redirect('/404')
}
const tmap: TreasureMap = await tmap_resp.json()
// Profile: {LoginName: 'bob', About: '...', PFP: '...', Created: '2022-01-01 00:00:00'},
// Submitted: [{URL: 'https://example.com', LikeCount: 100}, ...],
// Copied: [{URL: 'https://example.com', LikeCount: 1}, ...],
// Tagged: [{URL: 'https://example.com', LikeCount: 2}, ...]
// CategoryCounts: [{Category: 'umvc3', Count: 1}, ...],

const profile: Profile = tmap.Profile
const display_about = profile.About || is_signed_in_user

const used_sections = tmap_sections.filter((s) => tmap[s].length)
if (!used_sections.length) {
	return Astro.redirect(`/404`)
}
---

<Layout Title=`${login_name}'s Treasure Map`>
	<main>
		<h1>{login_name}'s Treasure Map</h1>
		<h2 class="subtitle">created: {format_date(profile.Created)}</h2>

		<div class="flex-container">
			<section id="profile">
				<ProfilePic
						client:load
						PFP={profile.PFP ? profile.PFP : undefined}
						LoginName={login_name}
						SignedInUser={signed_in_user}
						Token={token}
				/>
				{
					display_about ? (
						is_signed_in_user ? (
							<EditAbout
								client:load
								token={token}
								initial={profile.About}
							/>
						) : (
							<figcaption>about: {profile.About}</figcaption>
						)
					) : null
				}
			</section>
			
			<section id='overview'>
				<div>
					<h2>Top Categories</h2>
					<ol>
						{
							tmap.Categories.map((cat) => (
								<li>
									<a href={`/map/${login_name}/${cat.Category}`}>
										{cat.Category}
									</a>
									<span>({cat.Count})</span>
								</li>
							))
						}
					</ol>
				</div>
				<div>
					<h2>Skip to Section</h2>
					<ul id='skip_to_link_section'>
						{
							used_sections.map((s) => (
								<li>
									<a href={`#${s}`}>{s}</a>
								</li>
							))
						}
					</ul>
				</div>
			</section>
		</div>

		{
			used_sections.map((s) => {
				return (
					<section id={s} class='link_section'>
						<h2>{s}</h2>
						<ol>
							{tmap[s].map((link) => {
								if (s === 'Submitted' || s === 'Tagged') {
									return (
										<Link
											client:load
											Link={link}
											CategoriesFromUser={login_name}
											IsSummaryPage={false}
											IsTagPage={false}
											Token={token}
											User={signed_in_user}
										/>
									)
								} else {
									return (
										<Link
											client:load
											Link={link}
											CategoriesFromUser={
												link.CategoriesFromUser
													? login_name
													: undefined
											}
											IsSummaryPage={false}
											IsTagPage={false}
											Token={token}
											User={signed_in_user}
										/>
									)
								}
							})}
						</ol>
					</section>
				)
			})
		}
		<ScrollUp />
	</main>
</Layout>

<style>
	h1,
	h2 {
		text-align: left;
	}
	#profile {
		padding-top: 0;
	}
	#profile-pic figcaption {
		margin-top: 0.5rem;
	}
	#about {
		display: inline;
		margin-top: 20px;
	}
	#overview {
		display: flex;
		gap: 50px;
	}
	#skip_to_link_section {
		list-style: none;
		padding: 0;
	}
	.link_section h2 {
		position: sticky;
		top: 0px;
		padding: 1rem 0 0.5rem;
		background-color: #13151a;
	}

	@media (min-width: 680px) {
		.flex-container {
			display: flex;
			justify-content: space-between;
			gap: 50px;
		}

		#overview {
			padding-top: 0;
		}
	}
</style>
