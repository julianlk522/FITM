---
import Link from '../../components/Link'
import ProfilePic from '../../components/ProfilePic'
import Layout from '../../layouts/Layout.astro'
import type { TreasureMap, User } from '../../types'
import format_date from '../../util/format_date'

const { login_name } = Astro.params
if (!login_name) {
	return Astro.redirect('/')
}

const token = Astro.cookies.get('token')?.value
const signed_in_user = Astro.cookies.get('user')?.value

const tmap_resp = token
	? await fetch(`http://127.0.0.1:8000/map/${login_name}`, {
			headers: {
				Authorization: `Bearer ${token}`,
			},
		})
	: await fetch(`http://127.0.0.1:8000/map/${login_name}`)
if (tmap_resp.status > 399) {
	return Astro.redirect('/404')
}
const tmap: TreasureMap = await tmap_resp.json()
// Submitted: [{URL: 'https://example.com', LikeCount: 100}, ...],
// Tagged: [{URL: 'https://example.com', LikeCount: 2}, ...],
// Copied: [{URL: 'https://example.com', LikeCount: 1}, ...]}
// {CategoryCounts: [{Category: 'umvc3', Count: 1}, ...],

const user_resp = await fetch(`http://127.0.0.1:8000/users/${login_name}`)
if (user_resp.status > 399) {
	return Astro.redirect('/404')
}
const user: User = await user_resp.json()
// {LoginName: 'bob', About: '...', PFP: '...', Created: '2022-01-01 00:00:00'}
---

<Layout title=`${login_name}'s Treasure Map`>
	<main>
		<h1>{login_name}'s Treasure Map</h1>
		<ProfilePic
			client:load
			pfp={user.PFP ? user.PFP : undefined}
			login_name={login_name}
			signed_in_user={signed_in_user}
			token={token}
		/>
		<p>Created: {format_date(user.Created)}</p>
		{
			user.About ? (
				<>
					<h2>About</h2>
					<p>{user.About}</p>
				</>
			) : null
		}
		{
			tmap.Categories.length ? (
				<>
					<h2>Top Categories</h2>
					{tmap.Categories.map((cat) => (
						<li>
							<a href={`/usercat/${login_name}/${cat.Category}`}>
								{cat.Category}
							</a>
							<span>({cat.Count})</span>
						</li>
					))}
				</>
			) : null
		}
		{
			tmap.Submitted.length ? (
				<>
					<h2>Submitted</h2>
					{tmap.Submitted.map((link) => (
						<Link
							client:load
							link={link}
							is_summary_page={false}
							token={token}
							user={signed_in_user}
						/>
					))}
				</>
			) : null
		}
		{
			tmap.Tagged.length ? (
				<>
					<h2>Tagged</h2>
					{tmap.Tagged.map((link) => (
						<Link
							client:load
							link={link}
							is_summary_page={false}
							token={token}
							user={signed_in_user}
						/>
					))}
				</>
			) : null
		}
		{
			tmap.Copied.length ? (
				<>
					<h2>Copied</h2>
					{tmap.Copied.map((link) => (
						<Link
							client:load
							link={link}
							is_summary_page={false}
							token={token}
							user={signed_in_user}
						/>
					))}
				</>
			) : null
		}
	</main>
</Layout>

<style></style>
